diff --git a/linux-user/generic/sockbits.h b/linux-user/generic/sockbits.h
index b3b4a8e..c2df5be 100644
--- a/linux-user/generic/sockbits.h
+++ b/linux-user/generic/sockbits.h
@@ -12,6 +12,7 @@
 
 /* For setsockopt(2) */
 #define TARGET_SOL_SOCKET      1
+#define TARGET_SOL_PACKET       263
 
 #define TARGET_SO_DEBUG        1
 #define TARGET_SO_REUSEADDR    2
diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index 333e6b7..96cc18d 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -2181,6 +2181,7 @@ static abi_long do_setsockopt(int sockfd, int level, int optname,
         case IPV6_MTU:
         case IPV6_V6ONLY:
         case IPV6_RECVPKTINFO:
+        case IPV6_MULTICAST_IF:
         case IPV6_UNICAST_HOPS:
         case IPV6_MULTICAST_HOPS:
         case IPV6_MULTICAST_LOOP:
@@ -2517,6 +2518,39 @@ set_timeout:
 	if (get_user_u32(val, optval_addr))
             return -TARGET_EFAULT;
 	ret = get_errno(setsockopt(sockfd, SOL_SOCKET, optname, &val, sizeof(val)));
+        break;
+    case TARGET_SOL_PACKET:
+        switch (optname) {
+        case PACKET_ADD_MEMBERSHIP:
+        {
+            struct packet_mreq mreq;
+
+            if (optlen < sizeof(struct packet_mreq))
+                return -TARGET_EINVAL;
+
+            if (copy_from_user(&mreq, optval_addr, sizeof(struct packet_mreq)))
+                return -TARGET_EFAULT;
+
+            ret = get_errno(setsockopt(sockfd, SOL_PACKET, optname, &mreq, optlen));
+            break;
+        }
+        case PACKET_AUXDATA:
+        {
+            uint32_t val;
+
+            if (optlen < sizeof(uint32_t))
+                return -TARGET_EINVAL;
+
+            if (get_user_u32(val, optval_addr))
+                return -TARGET_EFAULT;
+
+            ret = get_errno(setsockopt(sockfd, SOL_PACKET, optname, &val, optlen));
+            break;
+        }
+        default:
+            goto unimplemented;
+        }
+
         break;
 #ifdef SOL_NETLINK
     case SOL_NETLINK:
@@ -2847,6 +2881,7 @@ get_timeout:
         case IPV6_MTU:
         case IPV6_V6ONLY:
         case IPV6_RECVPKTINFO:
+        case IPV6_MULTICAST_IF:
         case IPV6_UNICAST_HOPS:
         case IPV6_MULTICAST_HOPS:
         case IPV6_MULTICAST_LOOP:
@@ -3166,20 +3201,6 @@ static abi_long do_socket(int domain, int type, int protocol)
     int target_type = type;
     int ret;
 
-    ret = target_to_host_sock_type(&type);
-    if (ret) {
-        return ret;
-    }
-
-    if (domain == PF_NETLINK && !(
-#ifdef CONFIG_RTNETLINK
-         protocol == NETLINK_ROUTE ||
-#endif
-         protocol == NETLINK_KOBJECT_UEVENT ||
-         protocol == NETLINK_AUDIT)) {
-        return -TARGET_EPROTONOSUPPORT;
-    }
-
     if (domain == AF_PACKET ||
         (domain == AF_INET && type == SOCK_PACKET)) {
         protocol = tswap16(protocol);
@@ -3188,28 +3209,6 @@ static abi_long do_socket(int domain, int type, int protocol)
     ret = get_errno(socket(domain, type, protocol));
     if (ret >= 0) {
         ret = sock_flags_fixup(ret, target_type);
-        if (type == SOCK_PACKET) {
-            /* Manage an obsolete case :
-             * if socket type is SOCK_PACKET, bind by name
-             */
-            fd_trans_register(ret, &target_packet_trans);
-        } else if (domain == PF_NETLINK) {
-            switch (protocol) {
-#ifdef CONFIG_RTNETLINK
-            case NETLINK_ROUTE:
-                fd_trans_register(ret, &target_netlink_route_trans);
-                break;
-#endif
-            case NETLINK_KOBJECT_UEVENT:
-                /* nothing to do: messages are strings */
-                break;
-            case NETLINK_AUDIT:
-                fd_trans_register(ret, &target_netlink_audit_trans);
-                break;
-            default:
-                g_assert_not_reached();
-            }
-        }
     }
     return ret;
 }
